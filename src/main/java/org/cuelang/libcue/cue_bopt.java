// Generated by jextract

package org.cuelang.libcue;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct cue_bopt {
 *     enum cue_bopt_tag tag;
 *     unsigned long value;
 *     char* str;
 *     _Bool b;
 * };
 * }
 */
public class cue_bopt {

    public static MemoryLayout $LAYOUT() {
        return constants$1.const$0;
    }
    public static VarHandle tag$VH() {
        return constants$1.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum cue_bopt_tag tag;
     * }
     */
    public static int tag$get(MemorySegment seg) {
        return (int)constants$1.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum cue_bopt_tag tag;
     * }
     */
    public static void tag$set(MemorySegment seg, int x) {
        constants$1.const$1.set(seg, x);
    }
    public static int tag$get(MemorySegment seg, long index) {
        return (int)constants$1.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void tag$set(MemorySegment seg, long index, int x) {
        constants$1.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle value$VH() {
        return constants$1.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long value;
     * }
     */
    public static long value$get(MemorySegment seg) {
        return (long)constants$1.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long value;
     * }
     */
    public static void value$set(MemorySegment seg, long x) {
        constants$1.const$2.set(seg, x);
    }
    public static long value$get(MemorySegment seg, long index) {
        return (long)constants$1.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void value$set(MemorySegment seg, long index, long x) {
        constants$1.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle str$VH() {
        return constants$1.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* str;
     * }
     */
    public static MemorySegment str$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* str;
     * }
     */
    public static void str$set(MemorySegment seg, MemorySegment x) {
        constants$1.const$3.set(seg, x);
    }
    public static MemorySegment str$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void str$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle b$VH() {
        return constants$1.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool b;
     * }
     */
    public static boolean b$get(MemorySegment seg) {
        return (boolean)constants$1.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool b;
     * }
     */
    public static void b$set(MemorySegment seg, boolean x) {
        constants$1.const$4.set(seg, x);
    }
    public static boolean b$get(MemorySegment seg, long index) {
        return (boolean)constants$1.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void b$set(MemorySegment seg, long index, boolean x) {
        constants$1.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


