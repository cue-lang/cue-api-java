// Generated by jextract

package org.cuelang.libcue;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class CueNative  {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned long size_t;
     * }
     */
    public static final OfLong size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long int64_t;
     * }
     */
    public static final OfLong int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long uint64_t;
     * }
     */
    public static final OfLong uint64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long uintptr_t;
     * }
     */
    public static final OfLong uintptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long cue_ctx;
     * }
     */
    public static final OfLong cue_ctx = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long cue_value;
     * }
     */
    public static final OfLong cue_value = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long cue_error;
     * }
     */
    public static final OfLong cue_error = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long cue_attr;
     * }
     */
    public static final OfLong cue_attr = JAVA_LONG;
    /**
     * {@snippet :
     * enum cue_attr_kind.CUE_ATTR_FIELD = 1;
     * }
     */
    public static int CUE_ATTR_FIELD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum cue_attr_kind.CUE_ATTR_DECL = 2;
     * }
     */
    public static int CUE_ATTR_DECL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum cue_attr_kind.CUE_ATTR_VALUE = 3;
     * }
     */
    public static int CUE_ATTR_VALUE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum CUE_KIND.CUE_KIND_BOTTOM = 0;
     * }
     */
    public static int CUE_KIND_BOTTOM() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum CUE_KIND.CUE_KIND_NULL = 1;
     * }
     */
    public static int CUE_KIND_NULL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum CUE_KIND.CUE_KIND_BOOL = 2;
     * }
     */
    public static int CUE_KIND_BOOL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum CUE_KIND.CUE_KIND_INT = 3;
     * }
     */
    public static int CUE_KIND_INT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum CUE_KIND.CUE_KIND_FLOAT = 4;
     * }
     */
    public static int CUE_KIND_FLOAT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum CUE_KIND.CUE_KIND_STRING = 5;
     * }
     */
    public static int CUE_KIND_STRING() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum CUE_KIND.CUE_KIND_BYTES = 6;
     * }
     */
    public static int CUE_KIND_BYTES() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum CUE_KIND.CUE_KIND_STRUCT = 7;
     * }
     */
    public static int CUE_KIND_STRUCT() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum CUE_KIND.CUE_KIND_LIST = 8;
     * }
     */
    public static int CUE_KIND_LIST() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum CUE_KIND.CUE_KIND_NUMBER = 9;
     * }
     */
    public static int CUE_KIND_NUMBER() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum CUE_KIND.CUE_KIND_TOP = 10;
     * }
     */
    public static int CUE_KIND_TOP() {
        return (int)10L;
    }
    public static MethodHandle cue_newctx$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$1,"cue_newctx");
    }
    /**
     * {@snippet :
     * unsigned long cue_newctx();
     * }
     */
    public static long cue_newctx() {
        var mh$ = cue_newctx$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_compile_string$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$3,"cue_compile_string");
    }
    /**
     * {@snippet :
     * unsigned long cue_compile_string(unsigned long, char*, struct cue_bopt*);
     * }
     */
    public static long cue_compile_string(long x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = cue_compile_string$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_compile_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$5,"cue_compile_bytes");
    }
    /**
     * {@snippet :
     * unsigned long cue_compile_bytes(unsigned long, void*, unsigned long, struct cue_bopt*);
     * }
     */
    public static long cue_compile_bytes(long x0, MemorySegment x1, long x2, MemorySegment x3) {
        var mh$ = cue_compile_bytes$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_top$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$1,"cue_top");
    }
    /**
     * {@snippet :
     * unsigned long cue_top(unsigned long);
     * }
     */
    public static long cue_top(long x0) {
        var mh$ = cue_top$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_bottom$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$2,"cue_bottom");
    }
    /**
     * {@snippet :
     * unsigned long cue_bottom(unsigned long);
     * }
     */
    public static long cue_bottom(long x0) {
        var mh$ = cue_bottom$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_unify$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$4,"cue_unify");
    }
    /**
     * {@snippet :
     * unsigned long cue_unify(unsigned long, unsigned long);
     * }
     */
    public static long cue_unify(long x0, long x1) {
        var mh$ = cue_unify$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_instance_of$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$6,"cue_instance_of");
    }
    /**
     * {@snippet :
     * unsigned long cue_instance_of(unsigned long, unsigned long, struct cue_eopt*);
     * }
     */
    public static long cue_instance_of(long x0, long x1, MemorySegment x2) {
        var mh$ = cue_instance_of$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_lookup_string$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$0,"cue_lookup_string");
    }
    /**
     * {@snippet :
     * unsigned long cue_lookup_string(unsigned long, char*, unsigned long*);
     * }
     */
    public static long cue_lookup_string(long x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = cue_lookup_string$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_from_int64$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$1,"cue_from_int64");
    }
    /**
     * {@snippet :
     * unsigned long cue_from_int64(unsigned long, long long);
     * }
     */
    public static long cue_from_int64(long x0, long x1) {
        var mh$ = cue_from_int64$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_from_uint64$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$2,"cue_from_uint64");
    }
    /**
     * {@snippet :
     * unsigned long cue_from_uint64(unsigned long, unsigned long long);
     * }
     */
    public static long cue_from_uint64(long x0, long x1) {
        var mh$ = cue_from_uint64$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_from_bool$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$4,"cue_from_bool");
    }
    /**
     * {@snippet :
     * unsigned long cue_from_bool(unsigned long, _Bool);
     * }
     */
    public static long cue_from_bool(long x0, boolean x1) {
        var mh$ = cue_from_bool$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_from_double$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$6,"cue_from_double");
    }
    /**
     * {@snippet :
     * unsigned long cue_from_double(unsigned long, double);
     * }
     */
    public static long cue_from_double(long x0, double x1) {
        var mh$ = cue_from_double$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_from_string$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$1,"cue_from_string");
    }
    /**
     * {@snippet :
     * unsigned long cue_from_string(unsigned long, char*);
     * }
     */
    public static long cue_from_string(long x0, MemorySegment x1) {
        var mh$ = cue_from_string$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_from_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$3,"cue_from_bytes");
    }
    /**
     * {@snippet :
     * unsigned long cue_from_bytes(unsigned long, void*, unsigned long);
     * }
     */
    public static long cue_from_bytes(long x0, MemorySegment x1, long x2) {
        var mh$ = cue_from_bytes$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_dec_int64$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$4,"cue_dec_int64");
    }
    /**
     * {@snippet :
     * unsigned long cue_dec_int64(unsigned long, long long*);
     * }
     */
    public static long cue_dec_int64(long x0, MemorySegment x1) {
        var mh$ = cue_dec_int64$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_dec_uint64$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$5,"cue_dec_uint64");
    }
    /**
     * {@snippet :
     * unsigned long cue_dec_uint64(unsigned long, unsigned long long*);
     * }
     */
    public static long cue_dec_uint64(long x0, MemorySegment x1) {
        var mh$ = cue_dec_uint64$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_dec_bool$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$0,"cue_dec_bool");
    }
    /**
     * {@snippet :
     * unsigned long cue_dec_bool(unsigned long, _Bool*);
     * }
     */
    public static long cue_dec_bool(long x0, MemorySegment x1) {
        var mh$ = cue_dec_bool$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_dec_double$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$1,"cue_dec_double");
    }
    /**
     * {@snippet :
     * unsigned long cue_dec_double(unsigned long, double*);
     * }
     */
    public static long cue_dec_double(long x0, MemorySegment x1) {
        var mh$ = cue_dec_double$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_dec_string$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$2,"cue_dec_string");
    }
    /**
     * {@snippet :
     * unsigned long cue_dec_string(unsigned long, char**);
     * }
     */
    public static long cue_dec_string(long x0, MemorySegment x1) {
        var mh$ = cue_dec_string$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_dec_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$3,"cue_dec_bytes");
    }
    /**
     * {@snippet :
     * unsigned long cue_dec_bytes(unsigned long, void**, unsigned long*);
     * }
     */
    public static long cue_dec_bytes(long x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = cue_dec_bytes$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_dec_json$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$4,"cue_dec_json");
    }
    /**
     * {@snippet :
     * unsigned long cue_dec_json(unsigned long, void**, unsigned long*);
     * }
     */
    public static long cue_dec_json(long x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = cue_dec_json$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_validate$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$5,"cue_validate");
    }
    /**
     * {@snippet :
     * unsigned long cue_validate(unsigned long, struct cue_eopt*);
     * }
     */
    public static long cue_validate(long x0, MemorySegment x1) {
        var mh$ = cue_validate$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_default$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$0,"cue_default");
    }
    /**
     * {@snippet :
     * unsigned long cue_default(unsigned long, _Bool*);
     * }
     */
    public static long cue_default(long x0, MemorySegment x1) {
        var mh$ = cue_default$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_kind$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$2,"cue_kind");
    }
    /**
     * {@snippet :
     * enum CUE_KIND cue_kind(unsigned long);
     * }
     */
    public static int cue_kind(long x0) {
        var mh$ = cue_kind$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_incomplete_kind$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$3,"cue_incomplete_kind");
    }
    /**
     * {@snippet :
     * enum CUE_KIND cue_incomplete_kind(unsigned long);
     * }
     */
    public static int cue_incomplete_kind(long x0) {
        var mh$ = cue_incomplete_kind$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_is_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$5,"cue_is_equal");
    }
    /**
     * {@snippet :
     * _Bool cue_is_equal(unsigned long, unsigned long);
     * }
     */
    public static boolean cue_is_equal(long x0, long x1) {
        var mh$ = cue_is_equal$MH();
        try {
            return (boolean)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_attrs$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$1,"cue_attrs");
    }
    /**
     * {@snippet :
     * unsigned long* cue_attrs(unsigned long, enum cue_attr_kind);
     * }
     */
    public static MemorySegment cue_attrs(long x0, int x1) {
        var mh$ = cue_attrs$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_attr_name$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$3,"cue_attr_name");
    }
    /**
     * {@snippet :
     * char* cue_attr_name(unsigned long);
     * }
     */
    public static MemorySegment cue_attr_name(long x0) {
        var mh$ = cue_attr_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_attr_value$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$4,"cue_attr_value");
    }
    /**
     * {@snippet :
     * char* cue_attr_value(unsigned long);
     * }
     */
    public static MemorySegment cue_attr_value(long x0) {
        var mh$ = cue_attr_value$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_free$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$6,"cue_free");
    }
    /**
     * {@snippet :
     * void cue_free(unsigned long);
     * }
     */
    public static void cue_free(long x0) {
        var mh$ = cue_free$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cue_free_all$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$1,"cue_free_all");
    }
    /**
     * {@snippet :
     * void cue_free_all(unsigned long*);
     * }
     */
    public static void cue_free_all(MemorySegment x0) {
        var mh$ = cue_free_all$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


